function [dx] = simArm(x, x_d, Kp, Kv, ddq_d, cart_trajectory, t, ode_id, tspan)
%SIMARM Summary of this function goes here
%   Detailed explanation goes here
global p
global tm1
global tau
global err

tm1 = [tm1; t];

M = [ 0.0000015107182090000000001719232534114*cos(2.0*x(2,1)) - 0.0000015107182090000000001719232534114*cos(2.0*x(1,1)) + 0.000013759501475700000001565863338993*cos(x(2,1)) + 0.0000015107182090000000001719232534114*cos(2.0*x(1,1))*cos(2.0*x(2,1)) - 0.0000020957862964500000002385053654574*sin(2.0*x(1,1))*sin(2.0*x(2,1)) - 0.0000038411574817000000004371326745023*sin(2.0*x(1,1))*sin(x(2,1)) + 0.000021762803254440000361458506562568, 0.0000049591719970000000005643653322451*cos(x(2,1)) + 0.0000020957862964500000002385053654574*cos(2.0*x(1,1))*cos(2.0*x(2,1)) - 0.0000015107182090000000001719232534114*sin(2.0*x(1,1))*sin(2.0*x(2,1)) + 0.0000019205787408500000002185663372511*cos(2.0*x(1,1))*cos(x(2,1)) + 0.0000055298495890000000002084643859444;
      0.0000049591719970000000005643653322451*cos(x(2,1)) + 0.0000020957862964500000002385053654574*cos(2.0*x(1,1))*cos(2.0*x(2,1)) - 0.0000015107182090000000001719232534114*sin(2.0*x(1,1))*sin(2.0*x(2,1)) + 0.0000019205787408500000002185663372511*cos(2.0*x(1,1))*cos(x(2,1)) + 2.0e-39*sin(2.0*x(1,1))*sin(x(2,1)) + 0.0000055298495890000000002084643859444,     0.0000015107182090000000001719232534114*cos(2.0*x(1,1)) - 0.0000015107182090000000001719232534114*cos(2.0*x(2,1)) + 0.0000015107182090000000001719232534114*cos(2.0*x(1,1))*cos(2.0*x(2,1)) - 0.0000020957862964500000002385053654574*sin(2.0*x(1,1))*sin(2.0*x(2,1)) + 0.0000061149176764500000002750464979905];

V = [ 0.0000057617362225500000006556990117535*x(3,1).^2*sin(2.0*x(1,1) - 1.0*x(2,1)) - 0.0000057617362225500000006556990117535*x(3,1).^2*sin(2.0*x(1,1) + x(2,1)) - 0.0000054097567581750000006156429283033*x(3,1).^2*sin(2*x(1,1) + 2*x(2,1)) + 0.0000018032522527250000002052143094344*x(4,1).^2*sin(2*x(1,1) + 2*x(2,1)) + 0.0000045321546270000000005157697602343*x(3,1).^2*sin(2.0*x(1,1)) + 0.0000015107182090000000001719232534114*x(4,1).^2*sin(2.0*x(1,1)) + 0.00000087760213117500000009987316806903*x(3,1).^2*sin(2*x(1,1) - 2.0*x(2,1)) - 0.00000029253404372500000003329105602301*x(4,1).^2*sin(2*x(1,1) - 2.0*x(2,1)) - 0.0000019205787408500000002185663372511*x(3,1)*x(4,1)*sin(2.0*x(1,1) - 1.0*x(2,1)) - 0.0000019205787408500000002185663372511*x(3,1)*x(4,1)*sin(2.0*x(1,1) + x(2,1)) - 0.0000036065045054500000004104286188689*x(3,1)*x(4,1)*sin(2*x(1,1) + 2*x(2,1)) - 0.00000058506808745000000006658211204602*x(3,1)*x(4,1)*sin(2*x(1,1) - 2.0*x(2,1));
      0.0000068797507378500000007829316694963*x(3,1).^2*sin(x(2,1)) + 0.00000096028937042500000010928316862557*x(3,1).^2*sin(2.0*x(1,1) - 1.0*x(2,1)) + 0.00000096028937042500000010928316862557*x(3,1).^2*sin(2.0*x(1,1) + x(2,1)) + 0.0000018032522527250000002052143094344*x(3,1).^2*sin(2*x(1,1) + 2*x(2,1)) - 0.0000054097567581750000006156429283033*x(4,1).^2*sin(2*x(1,1) + 2*x(2,1)) + 0.0000015107182090000000001719232534114*x(3,1).^2*sin(2.0*x(2,1)) + 0.0000045321546270000000005157697602343*x(4,1).^2*sin(2.0*x(2,1)) + 0.00000029253404372500000003329105602301*x(3,1).^2*sin(2*x(1,1) - 2.0*x(2,1)) - 0.00000087760213117500000009987316806903*x(4,1).^2*sin(2*x(1,1) - 2.0*x(2,1)) - 0.0000049591719970000000005643653322451*x(3,1)*x(4,1)*sin(x(2,1)) + 0.00000096028937042500000010928316862557*x(3,1)*x(4,1)*sin(2.0*x(1,1) - 1.0*x(2,1)) - 0.00000096028937042500000010928316862557*x(3,1)*x(4,1)*sin(2.0*x(1,1) + x(2,1)) - 0.0000036065045054500000004104286188689*x(3,1)*x(4,1)*sin(2*x(1,1) + 2*x(2,1)) + 0.00000058506808745000000006658211204602*x(3,1)*x(4,1)*sin(2*x(1,1) - 2.0*x(2,1))];

G = [ 0.0015690378690000000733856255763499*sin(x(1,1))*sin(x(2,1)) - 0.0015690378690000000733856255763499*cos(x(1,1))*cos(x(2,1)) - 0.0035166983166000003780543581299867*cos(x(1,1));
                                                0.0015690378690000000733856255763499*sin(x(1,1))*sin(x(2,1)) - 0.0015690378690000000733856255763499*cos(x(1,1))*cos(x(2,1))];

Tau_Stiffness_Relaxed = [1.118e-18*x(1,1)^5 - 1.4724e-14*x(1,1)^4 + 7.2021e-11*x(1,1)^3 - 1.5778e-7*x(1,1)^2 + 0.00010758*x(1,1) + 0.14548;
                 3.6689e-9*x(2,1)^5 - 6.6466e-7*x(2,1)^4 + 0.000043944*x(2,1)^3 - 0.001267*x(2,1)^2 + 0.013425*x(2,1) + 0.03056];

Tau_Stiffness_Extended = [2.4553e-9*x(1,1)^5 - 7.4367e-7*x(1,1)^4 + 0.000081609*x(1,1)^3 - 0.0039209*x(1,1)^2 + 0.066136*x(1,1) + 0.34106;
                          -1.565e-9*x(2,1)^5 + 3.4856e-7*x(2,1)^4 - 0.000021952*x(2,1)^3 + 0.00029395*x(2,1)^2 + 0.0030018*x(2,1) + 0.23896];

desired_traj = sin(t);
e = x_d(1:2,1) - x(1:2,1);
err = [err e];
de = x_d(3:4,1) - x(3:4,1);

Tau_Stiffness = Tau_Stiffness_Relaxed;

if t >=5
    Tau_Stiffness = Tau_Stiffness_Extended;
end

if p == 1
    E = E + e*step;
    u = Kp*e + Kv*de + Ki*E;
elseif p == 2
    u = M*(ddq_d + Kp*e + Kv*de) + C*x(3:4,1);
elseif p == 3
    u = Kp*e + Kv*de;
else
    u = 0;
end

tau = [tau u];

dx(1,1) = x(3,1);
dx(2,1) = x(4,1);
dx(3:4,1) = M\(u - V - Tau_Stiffness);

end